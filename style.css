let files=[],activeFile=null,geminiKey=null;
document.addEventListener("DOMContentLoaded",()=>{
    const editor=ace.edit("editor");
    editor.setTheme("ace/theme/tomorrow_night_eighties");
    editor.session.setMode("ace/mode/text");
    editor.setShowPrintMargin(false);

    const fileExplorer=document.getElementById("fileExplorer");
    const terminal=document.getElementById("terminal");
    const langDetector=document.getElementById("lang-detector");
    const improveCodeBtn=document.getElementById("improve-code");
    const deobfuscateBtn=document.getElementById("deobfuscate");
    const obfuscateBtn=document.getElementById("obfuscate");
    const obfuscateLang=document.getElementById("obfuscate-language");
    const addFileBtn=document.getElementById("add-file-btn");
    const modalBackdrop=document.getElementById("modal-backdrop");
    const modalAddFile=document.getElementById("modal-addfile");
    const modalAiAgent=document.getElementById("modal-aiagent");
    const createFileBtn=document.getElementById("create-file");
    const closeModalBtn=document.getElementById("close-modal");
    const fileLangInput=document.getElementById("file-language");
    const fileNameInput=document.getElementById("file-name");
    const geminiKeyInput=document.getElementById("gemini-key");
    const saveGeminiBtn=document.getElementById("save-gemini");
    const registerLink=document.getElementById("register-link");
    const aiagentBox=document.getElementById("aiagent-box");
    const aiagentHeader=document.getElementById("aiagent-header");
    const aiagentClose=document.getElementById("aiagent-close");
    const aiagentInput=document.getElementById("aiagent-input");
    const aiagentSend=document.getElementById("aiagent-send");

    function logToTerminal(message,type='info'){
        const entry=document.createElement("div");
        entry.innerHTML=`[<span style="color:${type==='error'?'#f44336':'#888'}">${new Date().toLocaleTimeString()}</span>] ${message}`;
        terminal.appendChild(entry);
        terminal.scrollTop=terminal.scrollHeight;
    }

    function detectLanguage(code){
        if(/\b(function|const|let|var|class|import|export)\b/.test(code)&&/console\.log/.test(code))return'javascript';
        if(/\b(local\s+function|function\s+\w+\s*\(|end\b)/.test(code)&&(code.includes('print')||code.includes('require')))return'lua';
        if(/#include\s*<[a-zA-Z_]+>/.test(code)&&/\b(int\s+main|std::cout|printf)\b/.test(code))return'cpp';
        if(/<!DOCTYPE\s+html>/i.test(code)&&/<\s*head\s*>/.test(code)&&/<\s*body\s*>/.test(code))return'html';
        return'text';
    }

    function updateSidebar(){
        fileExplorer.innerHTML='';
        files.forEach((file,i)=>{
            const li=document.createElement("li");
            li.className="file-item"+(file===activeFile?' active':'');
            li.dataset.index=i;
            li.innerHTML=`<i>${getIcon(file.lang)}</i>${file.name||"Untitled"}<div class="file-controls"><button class="move-up" title="Move Up">â–²</button><button class="move-down" title="Move Down">â–¼</button></div>`;
            li.onclick=()=>{
                activeFile=file;
                editor.setValue(file.content,-1);
                editor.session.setMode("ace/mode/"+(file.lang||"text"));
                updateSidebar();
                langDetector.textContent="LANGUAGE: "+(file.lang?file.lang.toUpperCase():"TEXT");
            };
            li.querySelector('.move-up').onclick=(e)=>{
                e.stopPropagation();
                if(i>0){[files[i-1],files[i]]=[files[i],files[i-1]];updateSidebar();}
            };
            li.querySelector('.move-down').onclick=(e)=>{
                e.stopPropagation();
                if(i<files.length-1){[files[i+1],files[i]]=[files[i],files[i+1]];updateSidebar();}
            };
            fileExplorer.appendChild(li);
        });
    }

    function getIcon(lang){
        if(lang==="javascript")return"ðŸŸ¨";
        if(lang==="lua")return"ðŸŸ¦";
        if(lang==="cpp")return"ðŸŸ©";
        if(lang==="html")return"â¬œ";
        return"ðŸ“„";
    }

    addFileBtn.onclick=()=>{
        modalBackdrop.style.display="block";
        modalAddFile.style.display="block";
        fileLangInput.value="";
        fileNameInput.value="";
        fileLangInput.focus();
    };
    closeModalBtn.onclick=()=>{modalBackdrop.style.display="none";modalAddFile.style.display="none";};
    modalBackdrop.onclick=()=>{modalBackdrop.style.display="none";modalAddFile.style.display="none";modalAiAgent.style.display="none";};

    createFileBtn.onclick=()=>{
        let lang=fileLangInput.value.trim().toLowerCase();
        let name=fileNameInput.value.trim();
        if(!lang)lang="text";
        files.push({name,lang,content:""});
        activeFile=files[files.length-1];
        editor.session.setMode("ace/mode/"+lang);
        editor.setValue("",-1);
        updateSidebar();
        modalBackdrop.style.display="none";
        modalAddFile.style.display="none";
        langDetector.textContent="LANGUAGE: "+(lang?lang.toUpperCase():"TEXT");
    };

    function obfuscateJS(code){
        let obfuscated=code.replace(/(["'`])(?:(?=(\\?))\2.)*?\1/g,m=>btoa(m));
        obfuscated=obfuscated.replace(/([A-Za-z_]\w*)/g,(m)=>m.split('').reverse().join(''));
        return obfuscated;
    }
    function obfuscateLua(code){
        let obfuscated=code.replace(/print\(([^)]+)\)/g,(m,inside)=>`print(string.reverse(tostring(${inside})))`);
        obfuscated=obfuscated.replace(/local\s+(\w+)/g,(m,v)=>`local ${v.split('').reverse().join('')}`);
        return obfuscated;
    }
    function obfuscateCpp(code){
        let obfuscated=code.replace(/std::cout\s*<<\s*([^\n;]+);/g,(m,inside)=>`std::cout << std::string(${inside}).c_str();`);
        obfuscated=obfuscated.replace(/int\s+main\(\)/g,"int main_obf()");
        obfuscated=obfuscated.replace(/#include\s*<([a-zA-Z_]+)>/g,(m,h)=>`#include <${h.split('').reverse().join('')}>`);
        return obfuscated;
    }
    function obfuscateHTML(code){
        let obfuscated=code.replace(/<h1([^>]*)>([\s\S]*?)<\/h1>/i,(m,attr,text)=>`<h1${attr}>${btoa(text.trim())}</h1>`);
        obfuscated=obfuscated.replace(/<p([^>]*)>([\s\S]*?)<\/p>/i,(m,attr,text)=>`<p${attr}>${btoa(text)}</p>`);
        return obfuscated;
    }
    function obfuscateCode(code,lang){
        if(lang==="auto")lang=detectLanguage(code);
        let obfuscated="";
        if(lang==="javascript")obfuscated=obfuscateJS(code);
        else if(lang==="lua")obfuscated=obfuscateLua(code);
        else if(lang==="cpp")obfuscated=obfuscateCpp(code);
        else if(lang==="html")obfuscated=obfuscateHTML(code);
        else{logToTerminal("No obfuscator for detected language.","error");return;}
        editor.setValue(obfuscated,-1);
        if(activeFile)activeFile.content=obfuscated;
        logToTerminal("Code obfuscated ("+lang+").");
    }

    function deobfuscateJS(code){
        let deobfuscated=code.replace(/([A-Za-z_]\w*)/g,(m)=>m.split('').reverse().join(''));
        deobfuscated=deobfuscated.replace(/([A-Za-z0-9+\/=]+){1,}/g,(m)=>{try{return atob(m);}catch{return m;}});
        return deobfuscated;
    }
    function deobfuscateLua(code){
        let deobfuscated=code.replace(/print\(string\.reverse\(tostring\(([^)]+)\)\)\)/g,(m,inside)=>`print(${inside})`);
        deobfuscated=deobfuscated.replace(/local\s+(\w+)/g,(m,v)=>`local ${v.split('').reverse().join('')}`);
        return deobfuscated;
    }
    function deobfuscateCpp(code){
        let deobfuscated=code.replace(/std::cout\s*<<\s*std::string\(([^)]+)\)\.c_str\(\);/g,(m,inside)=>`std::cout << ${inside};`);
        deobfuscated=deobfuscated.replace(/int\s+main_obf\(\)/g,"int main()");
        deobfuscated=deobfuscated.replace(/#include\s*<([a-zA-Z_]+)>/g,(m,h)=>`#include <${h.split('').reverse().join('')}>`);
        return deobfuscated;
    }
    function deobfuscateHTML(code){
        let deobfuscated=code.replace(/<h1([^>]*)>([A-Za-z0-9+\/=]+)<\/h1>/i,(m,attr,text)=>`<h1${attr}>${atob(text)}</h1>`);
        deobfuscated=deobfuscated.replace(/<p([^>]*)>([A-Za-z0-9+\/=]+)<\/p>/i,(m,attr,text)=>`<p${attr}>${atob(text)}</p>`);
        return deobfuscated;
    }
    function deobfuscateCode(code){
        let lang=detectLanguage(code);
        let deobfuscated="";
        if(lang==="javascript")deobfuscated=deobfuscateJS(code);
        else if(lang==="lua")deobfuscated=deobfuscateLua(code);
        else if(lang==="cpp")deobfuscated=deobfuscateCpp(code);
        else if(lang==="html")deobfuscated=deobfuscateHTML(code);
        else{logToTerminal("No deobfuscator for detected language.","error");return;}
        editor.setValue(deobfuscated,-1);
        if(activeFile)activeFile.content=deobfuscated;
        logToTerminal("Code deobfuscated ("+lang+").");
    }

    function improveJS(code){
        let imp=["Improved variable scoping.","Standardized equality checks.","Beautified console output."];
        let newCode=code.replace(/var\s/g,"let ");
        newCode=newCode.replace(/\s==\s(?!=)/g," === ");
        newCode=newCode.replace(/console\.log\(([^)]+)\);/g,"console.log(String($1).trim());");
        return {code:newCode,imp};
    }
    function improveLua(code){
        let imp=["Improved print formatting.","Trimmed whitespace before 'end'.","Standardized table initialization."];
        let newCode=code.replace(/print\(([^)]+)\)/g,"print(tostring($1):gsub('^%s*(.-)%s*$', '%1'))");
        newCode=newCode.replace(/\s+end/g," end");
        return{code:newCode,imp};
    }
    function improveCpp(code){
        let imp=["Improved std::cout formatting.","Added explicit return type for main.","Avoided 'using namespace std'."];
        let newCode=code.replace(/using\s+namespace\s+std;/g,"");
        newCode=newCode.replace(/std::cout\s*<<\s*([^\n;]+);/g,"std::cout << $1.c_str();");
        newCode=newCode.replace(/int\s+main\(\)/g,"int main()");
        return{code:newCode,imp};
    }
    function improveHTML(code){
        let imp=["Enforced single title tag.","Improved h1 tag formatting."];
        let newCode=code.replace(/<title>([\s\S]*?)<\/title>/i,"<title>TabCode</title>");
        newCode=newCode.replace(/<h1([^>]*)>([\s\S]*?)<\/h1>/i,(m,attr,text)=>`<h1${attr}>${text.trim()}</h1>`);
        return{code:newCode,imp};
    }
    function improveCode(code){
        let lang=detectLanguage(code);
        let result={code:code,imp:[]};
        if(lang==="javascript")result=improveJS(code);
        else if(lang==="lua")result=improveLua(code);
        else if(lang==="cpp")result=improveCpp(code);
        else if(lang==="html")result=improveHTML(code);
        if(geminiKey){
            // Gemini AI integration would go here (call Gemini API with code and key)
            logToTerminal("AI improvement applied with Gemini API key.");
        }
        if(result.imp.length>0){
            logToTerminal("<strong>Code Improvement Suggestions:</strong>");
            result.imp.forEach(imp=>logToTerminal(`- ${imp}`));
            editor.setValue(result.code,-1);
            if(activeFile)activeFile.content=result.code;
        }else{
            logToTerminal("No improvements found.");
        }
    }

    improveCodeBtn.onclick=()=>improveCode(editor.getValue());
    obfuscateBtn.onclick=()=>obfuscateCode(editor.getValue(),obfuscateLang.value);
    deobfuscateBtn.onclick=()=>deobfuscateCode(editor.getValue());
    obfuscateLang.className="dropdown-clean";

    editor.session.on('change',()=>{
        let code=editor.getValue();
        if(activeFile)activeFile.content=code;
        let lang=detectLanguage(code);
        langDetector.textContent="LANGUAGE: "+(lang?lang.toUpperCase():"TEXT");
    });

    document.addEventListener("keydown",e=>{
        if(e.key==="Enter"){
            let val=editor.getValue();
            if(val.includes("/aiagent mode")){
                showAiAgentModal();
                let newVal=val.replace("/aiagent mode","");
                setTimeout(()=>editor.setValue(newVal,-1),100);
            }
        }
    });

    function showAiAgentModal(){
        modalBackdrop.style.display="block";
        modalAiAgent.style.display="block";
        geminiKeyInput.value="";
    }
    saveGeminiBtn.onclick=()=>{
        geminiKey=geminiKeyInput.value.trim();
        modalBackdrop.style.display="none";
        modalAiAgent.style.display="none";
        logToTerminal("Gemini API key saved.");
    };

    registerLink.onclick=()=>{window.open("/registeraccount","_blank");};

    document.addEventListener("contextmenu",function(e){
        e.preventDefault();
        showAiAgentBox(e.clientX,e.clientY);
    });

    function showAiAgentBox(x,y){
        aiagentBox.style.display="flex";
        aiagentBox.style.left=x+"px";
        aiagentBox.style.top=y+"px";
    }
    aiagentClose.onclick=()=>{aiagentBox.style.display="none";};
    aiagentSend.onclick=()=>aiAgentSend();
    aiagentInput.onkeydown=e=>{
        if(e.key==="Enter"){e.preventDefault();aiAgentSend();}
    };
    function aiAgentSend(){
        let q=aiagentInput.value.trim();
        if(!q)return;
        // Gemini AI integration would go here (call Gemini API with q and geminiKey)
        logToTerminal("AI agent answered your question.");
        aiagentBox.style.display="none";
        aiagentInput.value="";
    }

    let dragging=false,dragOffset={x:0,y:0};
    aiagentHeader.onmousedown=function(e){
        dragging=true;
        dragOffset.x=e.clientX-aiagentBox.offsetLeft;
        dragOffset.y=e.clientY-aiagentBox.offsetTop;
        document.body.style.userSelect="none";
    };
    document.onmousemove=function(e){
        if(dragging){
            aiagentBox.style.left=(e.clientX-dragOffset.x)+"px";
            aiagentBox.style.top=(e.clientY-dragOffset.y)+"px";
        }
    };
    document.onmouseup=function(){dragging=false;document.body.style.userSelect="auto";};

    updateSidebar();
});
