:root {
    --color-bg: #111827;
    --color-calc-bg: #1f2937;
    --color-display-bg: #141a24;
    --color-text: #f3f4f6;
    --color-text-op: #e5e7eb;
    --color-btn-num: #374151;
    --color-btn-func: #4b5563;
    --color-btn-op: #f87171;
    --color-btn-op-hover: #ef4444;
    --color-btn-equals: #10b981;
    --color-btn-equals-hover: #059669;
    --font-main: 'Inter', 'Segoe UI', sans-serif;
    --shadow-deep: 0 12px 30px rgba(0, 0, 0, 0.5);
    --shadow-btn: 0 4px 8px rgba(0, 0, 0, 0.3);
}

* {
    box-sizing: border-box;
}

html, body {
    height: 100%;
}

body {
    background: var(--color-bg);
    color: var(--color-text);
    font-family: var(--font-main);
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
}

#calculator-container {
    padding: 20px;
}

#calculator {
    width: 340px;
    height: auto;
    background: var(--color-calc-bg);
    border-radius: 20px;
    box-shadow: var(--shadow-deep);
    padding: 20px;
    touch-action: manipulation;
}

#display-container {
    margin-bottom: 20px;
}

#display {
    width: 100%;
    height: 90px;
    background: var(--color-display-bg);
    border: none;
    border-radius: 15px;
    font-size: 2.8em;
    padding: 10px 20px;
    text-align: right;
    color: var(--color-text);
    outline: none;
    overflow-x: auto;
    white-space: nowrap;
    font-weight: 300;
    box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.6);
    line-height: 70px;
    letter-spacing: -1px;
}

#buttons {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 12px;
}

.btn {
    border: none;
    padding: 0;
    font-size: 1.5em;
    border-radius: 12px;
    cursor: pointer;
    transition: background 0.1s, transform 0.05s, box-shadow 0.1s;
    user-select: none;
    min-height: 65px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: var(--shadow-btn);
    font-weight: 500;
}

.btn:active {
    transform: scale(0.97);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);
}

.num {
    background: var(--color-btn-num);
    color: var(--color-text);
}

.num:hover {
    background: #475569;
}

.func {
    background: var(--color-btn-func);
    color: var(--color-text);
    font-size: 1.1em;
}

.func:hover {
    background: #6b7280;
}

.op, .equals {
    font-weight: 600;
}

.op {
    background: var(--color-btn-op);
    color: var(--color-text-op);
}

.op:hover {
    background: var(--color-btn-op-hover);
}

.equals {
    background: var(--color-btn-equals);
    color: var(--color-text-op);
    font-size: 1.8em;
}

.equals:hover {
    background: var(--color-btn-equals-hover);
}

@media (max-width: 400px) {
    #calculator {
        width: 100%;
        max-width: 340px;
        padding: 15px;
    }
    #display {
        height: 70px;
        font-size: 2.2em;
    }
    .btn {
        min-height: 60px;
        font-size: 1.4em;
        border-radius: 10px;
        gap: 10px;
    }
}
```eof

---

## 🛠️ `script.js` (Improved Double-Click Logic)

I've added a robust `lastAsteriskTime` check to reliably handle the double-tap of the `*` key within a short time frame, which is a common pattern for "double-click" detection.

```javascript
document.addEventListener("DOMContentLoaded", () => {
    const display = document.getElementById("display");
    const buttons = document.getElementById("buttons");
    let lastAsteriskTime = 0;
    const doubleClickTimeThreshold = 300;

    function appendToDisplay(value) {
        if (value === '**') {
            display.value += '°';
        } else {
            display.value += value;
        }
    }

    function calculate() {
        let expression = display.value;
        
        if (expression.trim() === "a+i") {
            window.location.href = "/homeworkhelper";
            return;
        }

        expression = expression.replace(/°/g, '**');
        expression = expression.replace(/×/g, '*');
        expression = expression.replace(/÷/g, '/');
        expression = expression.replace(/−/g, '-');

        try {
            const result = eval(expression);
            if (typeof result === 'number' && !isFinite(result)) {
                display.value = "Error";
            } else {
                display.value = result.toFixed(8).replace(/\.?0+$/, "");
            }
        } catch (e) {
            display.value = "Error";
        }
    }

    buttons.addEventListener("click", (e) => {
        const target = e.target;
        if (!target.classList.contains('btn')) return;

        const value = target.getAttribute('data-value');

        if (value === '=') {
            calculate();
        } else if (value === 'C') {
            display.value = '';
        } else if (value === 'del') {
            display.value = display.value.slice(0, -1);
        } else if (value === '**') {
            appendToDisplay('°');
        } else {
            appendToDisplay(value);
        }
    });

    display.addEventListener('keydown', (e) => {
        const key = e.key;

        if (key === 'Enter') {
            e.preventDefault();
            calculate();
        } else if (key === 'Backspace') {
        } else if (key === 'c' || key === 'C') {
            e.preventDefault();
            display.value = '';
        } else if ('0123456789+-.'.includes(key)) {
        } else if (key === '/') {
            e.preventDefault();
            appendToDisplay('÷');
        } else if (key === '-') {
            e.preventDefault();
            appendToDisplay('−');
        } else if (key === '*') {
            e.preventDefault();
            const currentTime = new Date().getTime();
            if (currentTime - lastAsteriskTime < doubleClickTimeThreshold) {
                display.value = display.value.slice(0, -1);
                appendToDisplay('°');
                lastAsteriskTime = 0;
            } else {
                appendToDisplay('×');
                lastAsteriskTime = currentTime;
            }
        } else if (key === 'a' || key === 'i') {
        } else {
            e.preventDefault();
        }
    });

    display.removeAttribute('readonly'); 
    display.focus();
});
